import business.model.strategy.BusinessModelStrategy;
import net.cloudburo.avro.registry.ElasticSearchSchemaRegistry;
import net.cloudburo.avro.registry.SchemaRegistryFactory;
import net.cloudburo.elasticsearch.ESPersistencyManager;

import java.io.*;

import org.apache.log4j.Logger;

/**
 * The example outlines  the "creation" of a new Data Object, which will be peristed on in the ElasticSearch
 * index. So the Avro Message will consist of exactly 1 record and not an array ob records
 */
public class HelloWorld {

    private static Logger logger = Logger.getLogger(HelloWorld.class);

    public static void main(String[] args) throws IOException {
        if (args.length !=3) {
            logger.error("Expect 3 arguments: ElasticSearchServerURI, userName, password");
            return;
        }

        // Create connection to our Elastic Cluster
        ESPersistencyManager esPersistencyManager = ESPersistencyManager.createSingleton(args[0], args[1],args[2]);

        // Create connection to our Registry, which is ElasticSearch bases
        ElasticSearchSchemaRegistry registry = (ElasticSearchSchemaRegistry)SchemaRegistryFactory.getSchemaRegistry(SchemaRegistryFactory.registryElasticSearchBased);
        registry.setESPersistencyManager(esPersistencyManager);

        // Create our BackendComponent which will manage the persistency layer (aka the Writer)
        BackendComponent beComponent = BackendComponent.createSingleton(esPersistencyManager,registry);

        // Create our ServiceComponent will manages the frontend layer (aka the Reader)
        // We pass in as well the schema fingerprint for the message schema.
        // In a real life example, this would be normally configured statically as part of the component static configuration
        ServiceComponent srvComponent = ServiceComponent.createSingleton(esPersistencyManager,registry, beComponent.backendComponentSchemaFingerprint);

        // Create a BusinessModel Strategy Object / Test Data
        // The BusinessModelStrategy object is a Data Access Object generated by the Avro Schema Generator
        BusinessModelStrategy strategy = TestLoader.getBusinessModelStrategy();

        // We simulate here now the scenario that our Service Component got some new input data by a end user
        // I.e. the Service Component has to process this input data and generate an Avro Binary message
        byte[] msg = srvComponent.processInputData(strategy);

        // We pass the binary message to our backend component, in a real example this may be
        // a JSON, Webservice or RPC call, in our sample a simple library call
        String payloadJson = beComponent.persist(msg, "businessmodel", "strategy", strategy.getIndexIpid().toString());
        logger.info("Persisted Avro payload JSON: "+payloadJson);
    }
}
